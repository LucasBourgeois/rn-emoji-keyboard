"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[866],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(r),y=o,d=m["".concat(p,".").concat(y)]||m[y]||u[y]||a;return r?n.createElement(d,i(i({ref:t},c),{},{components:r})):n.createElement(d,i({ref:t},c))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},564:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:6,title:"Emojis Data"},i=void 0,s={unversionedId:"api/emojisData",id:"api/emojisData",title:"Emojis Data",description:"The library provides the ability to import a .json file containing all currently available emojis. Additionally, you can pass your own set of emojis, provided they follow our structure and types.",source:"@site/docs/api/emojisData.md",sourceDirName:"api",slug:"/api/emojisData",permalink:"/rn-emoji-keyboard/docs/api/emojisData",draft:!1,editUrl:"https://github.com/TheWidlarzGroup/rn-emoji-keyboard/tree/master/docs/docs/api/emojisData.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Emojis Data"},sidebar:"api",previous:{title:"Styles",permalink:"/rn-emoji-keyboard/docs/api/styles"}},p={},l=[],c={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The library provides the ability to import a ",(0,o.kt)("inlineCode",{parentName:"p"},".json")," file containing all currently available emojis. Additionally, you can pass your own set of emojis, provided they follow our structure and types."),(0,o.kt)("p",null,"To import the emojis data, use the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { emojisByCategory } from 'rn-emoji-keyboard'\n")),(0,o.kt)("p",null,"Here is the EmojisData structure explained as Typescript code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"\nexport type EmojiTypeBase = {\n  name: string\n  slug: string\n  alreadySelected?: boolean\n}\n\nexport type UnicodeEmojiType = EmojiTypeBase & {\n  emoji: string // Visual representation of emoji\n  toneEnabled: boolean\n  unicode_version: string\n}\n\nexport type UriEmojiType = EmojiTypeBase & {\n  uri: string // Distant URI / base64 / Image.resolveAssetSource(require('asset/path/emote.ext').uri\n}\n\nexport type EmojiType = UnicodeEmojiType | UriEmojiType\n\ntype EmojisByCategory = {\n  title: CategoryTypes\n  data: JsonEmoji[]\n}\n\nconst emojisByCategory: EmojisByCategory[]\n")))}u.isMDXComponent=!0}}]);